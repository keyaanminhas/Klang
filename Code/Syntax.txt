DATA_TYPE:
    INTEGER : A whole number                                        - 5,-3
    REAL : A number capable of containing a fractional part         - 4.7, -0.3
    CHAR : A single character                                       - 'a', 'x'
    STRING : A sequence of zero or more characters                  - "This is string"
    BOOLEAN: The logical values TRUE and FALSE                      - TRUE, FALSE



IDENTIFIER:
    - Only Contain Letters (A–Z, a–z) and digits (0–9)
    - Must start with a letter
    - No underscores
    - Case Sensitive


DECLARATION:
    - DECLARE <IDENTIFIER> : <DATA_TYPE>
    - DECLARE Name : STRING
    - DECLARE Age : INT


CONSTANT:
    - CONSTANT <IDENTIFIER> = <VALUE>
    - CONSTANT DefaultText = "N/A"


ASSIGNMENT:
    - <IDENTIFIER> <-- <VALUE>
    - Counter <-- Counter + 1

    - <IDENTIFIER> = <VALUE>
    - Counter = Counter + 1


ARRAYS:
    - DECLARE <IDENTIFIER> : ARRAY[<l>:<u>] OF <DATA_TYPE>
    - DECLARE StudentNames : ARRAY[1:30] OF STRING

    - DECLARE <IDENTIFIER> : ARRAY[<l1>:<u1>,<l2>:<u2>] OF <DATA_TYPE>
    - DECLARE NoughtsAndCrosses : ARRAY[1:3,1:3] OF CHAR

    - StudentNames[1] <-- "Ali"
    - NoughtsAndCrosses[2,3] = ꞌXꞌ
    - StudentNames[n+1] <-- StudentNames[n] 
    - SavedGame <-- NoughtsAndCrosses


STRUCTS:
    TYPE <identifier1>
    DECLARE <identifier2> : <data type>
    DECLARE <identifier3> : <data type>
    ...
    ENDTYPE

    TYPE Student
    DECLARE Surname : STRING
    DECLARE FirstName : STRING
    DECLARE DateOfBirth : DATE
    DECLARE YearGroup : INTEGER
    DECLARE FormGroup : CHAR
    ENDTYPE

    DECLARE Pupil1 : Student
    DECLARE Pupil2 : Student
    DECLARE Form : ARRAY[1:30] OF Student

    Pupil1.Surname <-- "Johnson"
    Pupil1.Firstname <-- "Leroy"
    Pupil1.DateOfBirth = 02/01/2005
    Pupil1.YearGroup = 6
    Pupil1.FormGroup = ꞌAꞌ



IO OPERATIONS:
    - INPUT <identifier>
    - OUTPUT <value(s)>
    - OUTPUT "You have ", Lives, " lives left" 



RATIONAL OPERATIONS:
    >
    <
    >=
    <=
    =
    <>
    RESULT IS ALWAYS BOOLEAN




LOGICAL OPERATORS:
    AND
    OR
    NOT



IF THEN ELSE:
    IF <condition>
    THEN
    <statements>
    ELSE
    <statements>
    ENDIF



CASE STATEMENTS:
    CASE OF <identifier>
    <value 1> : <statement>
    <value 2> : <statement>
    ...
    OTHERWISE <statement>
    ENDCASE



LOOPS:
    FOR <identifier> <-- <value1> TO <value2>
    <statements>
    ENDFOR

    FOR <identifier>  <value1> TO <value2> STEP <increment>
    <statements>
    ENDFOR

    REPEAT
        <Statements>
    UNTIL <condition>


    WHILE <condition> DO
        <statements>
    ENDWHILE



PROCEDURE:
    PROCEDURE <identifier>(<param1>:<datatype>,<param2>:<datatype>...)
        <statements>
    ENDPROCEDURE
    CALL <identifier>(Value1,Value2...)



FUNCTIONS:
    FUNCTION <identifier>(<param1>:<datatype>,<param2>:<datatype>...)  RETURNS <data type>
        <statements>
    ENDFUNCTION





